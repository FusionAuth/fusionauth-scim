/*
 * Copyright (c) 2020, FusionAuth, All Rights Reserved
 */
savantVersion = "1.0.0"
fusionauthVersion = "1.0.1-{integration}"

fusionAuthJavaClientVersion = "1.99.0-{integration}"
jacksonVersion = "2.13.0"
jackson5Version = "2.6.1"
savantVersion = "1.0.0"
guiceVersion = "5.0.1"
guavaVersion = "30.1.0-jre"
testngVersion = "7.3.0"

project(group: "io.fusionauth", name: "fusionauth-scim", version: "1.0.1-{integration}", licenses: ["Commercial"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://external.savant.fusionauth.io")
      url(url: "https://internal.savant.fusionauth.io", username: global.internalRepositoryUsername, password: global.internalRepositoryPassword)
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://internal.svn.fusionauth.io")
  }

  dependencies {
    group(name: "provided") {
      dependency(id: "com.google.inject:guice:${guiceVersion}", skipCompatibilityCheck: true)
    }
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
      dependency(id: "com.inversoft:jackson5:${jackson5Version}")
    }
    group(name: "runtime") {
    }
    group(name: "test-compile") {
      dependency(id: "com.google.guava:guava:${guavaVersion}", skipCompatibilityCheck: true)
      dependency(id: "org.testng:testng:${testngVersion}")
    }
  }

  publications {
    standard()
  }
}

/*
 * Define Plugins
 */
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.2.0")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

// Until we get rid of the usages of sun.* - we need this
java.settings.javaVersion = "17"
java.settings.compilerArguments = "-XDignore.symbol.file --add-exports java.base/sun.security.util=ALL-UNNAMED --add-exports=java.base/sun.security.x509=ALL-UNNAMED"

target(name: "clean", description: "Cleans out the build directory") {
  java.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["jar"]) {
  dependency.integrate()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}

target(name: "print-jdk-modules", description: "Builds the module dependencies", dependencies: ["jar"]) {
  // This will be missing 'jdk.crypto.ec', `jdk.localedata` and maybe others?
  java.printJDKModuleDeps()
}

target(name: "list-unused-dependencies", description: "Lists all unused dependencies", dependsOn: ["compile"]) {
  file.mkdir(dir: "build/classes/test")
  dependency.listUnusedDependencies()
}

target(name: "print-dependency-tree", description: "Prints the dependency tree") {
  dependency.printFull()
}

target(name: "write-licenses", description: "Write licenses to build/licenses") {
  dependency.writeLicenses(to: "build/licenses")
}
